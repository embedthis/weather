/*
    CloudSchema.json5 -- Core schema to use with cloud-based management (with optional local management)
    This is used cloud-side in device-* databases and local device-side (for State)
    Clouds may add to this schema, but the core is always required.
 */
{
    process: {
        Broadcast: {enable: 'both', sync: 'down', show: true, mem: true},
        Command: {enable: 'both', sync: 'down', show: true},
        Device: {enable: 'both', sync: 'up', show: true},
        Log: {enable: 'both', sync: 'up', show: true, actions: true},
        Store: {enable: 'both', notify: 'default', sync: 'up', actions: true, delay: 0},
        SyncState: {enable: 'device', show: false},
    },
    models: {
        /*
            Basic model to broadcast database data to devices via database sync
            DEPRECATED - Use Command instead to send commands to devices or accounts.
            Command supports offline devices.
         */
        Broadcast: {
            pk: {type: 'string', value: 'bcast#${accountId}#${deviceId}', hidden: true},
            sk: {type: 'string', value: 'bcast#${key}', hidden: true},
            accountId: {type: 'string', required: true, readonly: true},
            created: {type: 'date', readonly: true},
            deviceId: {type: 'string', required: true, readonly: true},
            key: {type: 'string', required: true},
            value: {type: 'object', required: true},
            type: {type: 'string', required: true},
            updated: {type: 'date', readonly: true},
            expires: {type: 'date', ttl: true},
            _source: {type: 'string', hidden: true},
        },

        Command: {
            pk: {type: 'string', value: 'command#', hidden: true},
            sk: {type: 'string', value: 'command#${accountId}#${deviceId}#${id}', hidden: true},
            accountId: {type: 'string', required: true, readonly: true},
            created: {type: 'date', readonly: true},
            args: {type: 'object', required: true, default: {}},
            command: {type: 'string', required: true},
            created: {type: 'date', readonly: true},
            deviceId: {type: 'string', required: true, readonly: true},
            description: {type: 'string'},
            expires: {type: 'date', ttl: true},
            id: {type: 'string', generate: 'ulid' },
            updated: {type: 'date', readonly: true},
            _source: {type: 'string', hidden: true},
        },

        /*
            One entry per device. Must be as compact as possible.
         */
        Device: {
            pk: {type: 'string', value: 'd#${accountId}', hidden: true},
            sk: {type: 'string', value: 'd#${id}', hidden: true},
            accountId: {type: 'string', readonly: true, notes: 'Manage account ID'},
            connection: {type: 'string', notes: 'If the device is online or offline'},
            created: {type: 'date'},
            description: {type: 'string'},
            id: {type: 'string', required: true, readonly: true},
            model: {type: 'string'},
            name: {type: 'string'},
            product: {type: 'string', notes: 'Product Token'},
            state: {type: 'string', notes: 'Device state'},
            test: {type: 'boolean', notes: 'Test device'},
            updated: {type: 'date', readonly: true},
            _source: {type: 'string', hidden: true},
        },

        Log: {
            pk: {type: 'string', value: 'l#${accountId}#${deviceId}', hidden: true},
            sk: {type: 'string', value: 'l#${id}', hidden: true},
            id: {type: 'string', generate: 'ulid', notes: 'Unique ID'},
            accountId: {type: 'string', required: true, readonly: true, notes: 'Owning account'},
            created: {type: 'date', readonly: true},
            deviceId: {type: 'string', required: true, readonly: true, notes: 'Owning device'},
            message: {type: 'string' },
            context: {type: 'object', default: {} },
            expires: {type: 'date', ttl: true},
            updated: {type: 'date', readonly: true},
            _source: {type: 'string', hidden: true},
        },

        /*
            Cloud-side simple Key/value store. Can use MQTT to publish or database sync to update.
         */
        Store: {
            pk: {type: 'string', value: 's#${accountId}#${deviceId}', hidden: true},
            sk: {type: 'string', value: 's#${key}', hidden: true},
            accountId: {type: 'string', required: true, readonly: true},
            created: {type: 'date', readonly: true},
            deviceId: {type: 'string', required: true, readonly: true},
            key: {type: 'string', required: true},
            value: {type: 'object', required: true},
            type: {type: 'string', required: true},
            updated: {type: 'date', readonly: true},
            expires: {type: 'date', ttl: true},
            _source: {type: 'string', hidden: true},
        },

        /*
            Device-side sync state
         */
        SyncState: {
            sk: {type: 'string', value: 'state#'},
            lastSync: {type: 'date', notes: 'Last time the device was synced with the cloud'},
            lastUpdate: {type: 'date', notes: 'Last time the device software was updated'},        
        },
    },
}
