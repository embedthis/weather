/*
    apps.me - Interface above the apps

    This is a meta-layer over the apps. All apps are enabled and at build/make time,
    the app that is selected in ioto.json5 is enabled and the others are disabled.
    With Make, this happens by parsing ioto.json5 and setting env vars to control the make.
 */

Me.load({
    targets: {
        apps: {
            configurable: true,
            description: 'Ioto Apps',
            discovers: [ 'demo', 'ai', 'auth', 'blink', 'blank', 'unit' ],
            libraries: [ 'app' ],
            enable: true,
            path: '${BIN}/libapp${ARLIB}',

            /*
                Not when generating or configuring, select the one app to build from ioto.json5
             */
            postblend: function (apps) {
                apps.uses = apps.discovers
                if (makeme.options.gen && !makeme.options.gen.contains('xcode')) {
                    return
                }
                if (makeme.options.configure && !makeme.generating) return
                let selected = me.settings.app
                for each (let app in apps.discovers) {
                    if (me.targets[app]) {
                        me.targets[app].enable = false
                    }
                }
                if (me.targets[selected]) {
                    me.targets[selected].enable = true
                } else {
                    throw 'Cannot find ' + selected + ' app'
                }
            },

            config: function (apps) {
                apps.uses = apps.discovers
                let app
                for each (p in apps.discovers) {
                    let ptarget = me.targets[p]
                    if (ptarget.explicit) {
                        if (ptarget.enable) {
                            app = p
                            break
                        } else if (ptarget.explicit != 'without') {
                            throw 'Required App "' + p + '" is not enabled'
                        }
                    }
                }
                /*
                    Select an app
                 */
                for each (p in apps.discovers) {
                    if (p == app) {
                        continue
                    }
                    if (me.targets[p] && me.targets[p].enable && !app) {
                        app = p
                    } else if (app) {
                        me.targets[p].enable = false
                    }
                }
                if (app) {
                    let name = app
                    me.settings.app = name
                    me.targets.apps.app = app
                    let top = me.dir.top

                    // Cmd.run('json app=' + name + ' state/config/ioto.json5', {dir: top})
                    
                    if (!makeme.generating && !makeme.options.gen) {
                        //  Don't clean site if generating
                        Cmd.sh('rm -fr state/site/*', {dir: top})
                    }
                    Cmd.sh('rm -fr state/db/*.jnl state/db/*.db', {dir: top})
                    Cmd.sh('find config -type f -print | egrep -v "schema.json5|ioto.json5|device.json5|local.json5" | xargs -r rm', {dir: top.join('state')})

                    let required = makeme.options['with'] && makeme.options['with'].contains(app)
                    if ((makeme.generating || makeme.options.gen) && !required) {
                        me.targets[app].enable = false
                    }
                } else {
                    throw 'No enabled Apps.\n'
                }
            },

            postconfig: function() {
                Cmd.sh('rm -f ../state/db/*')
            },

            without: function(target) {
                for each (p in target.discovers) {
                    me.targets[p].enable = false
                }
            },
        }
    }
})
