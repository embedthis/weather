/*
    openssl.me -- OpenSSL Support
 */
require ejs.version

Me.load({ 
    targets: {
        openssl: {
            description: 'OpenSSL Support',
            config: function (target) {
                let os = me.platform.os
                let version = (me.settings.openssl || {}).version || '3.5'
                if (me.options.gen) {
                    let result = {
                        includes: [ me.dir.inc ],
                    }
                    if (os == 'linux') {
                        result.libpaths = []
                        result.libraries = [ 'ssl', 'crypto' ]

                    } else if (os == 'macosx') {
                        result.defines = ['ME_COM_OPENSSL_PATH=/opt/homebrew']
                        result.includes.push('$(ME_COM_OPENSSL_PATH)/include')
                        result.libpaths = ['$(ME_COM_OPENSSL_PATH)/lib', '$(ME_COM_OPENSSL_PATH)']
                        result.libraries = [ 'ssl', 'crypto' ]

                    } else if (os != 'windows') {
                        result.defines = ['ME_COM_OPENSSL_PATH=/path/to/openssl']
                        result.includes.push('$(ME_COM_OPENSSL_PATH)/include')
                        result.libpaths = ['$(ME_COM_OPENSSL_PATH)/lib', '$(ME_COM_OPENSSL_PATH)']
                        result.libraries = [ 'ssl', 'crypto' ]

                    } else if (Version(version).acceptable('<1.1')) {
                        result.defines = ['ME_COM_OPENSSL_PATH=/path/to/openssl']
                        result.includes.push('$(ME_COM_OPENSSL_PATH)/include')
                        result.libpaths = ['$(ME_COM_OPENSSL_PATH)/lib']
                        result.libraries = ['libcrypto.lib', 'libssl.lib']

                    } else {
                        result.defines = ['ME_COM_OPENSSL_PATH=/path/to/openssl']
                        result.includes.push('$(ME_COM_OPENSSL_PATH)/include')
                        result.libpaths = ['$(ME_COM_OPENSSL_PATH)', '$(ME_COM_OPENSSL_PATH)/lib']
                        result.libraries = [ 'libssl', 'libcrypto' ]
                    }
                    return result
                }

                let lib, libraries, libpaths, imports, includes, path
                let search = getComponentSearch(target, 'openssl').unique()
                if (me.platform.os == 'windows') {
                    search = search.map(function(p:Path) p) + search.map(function(p:Path) p.join('lib'))
                    lib = probe('libcrypto.lib', {fullpath: true, search: search, nopath: true, nothrow: true})
                    if (!lib) {
                        lib = probe('libssl.lib', {fullpath: true, search: search, nopath: true})
                        libraries = [ 'libssl', 'libcrypto' ]
                        imports =   [ lib.parent.join('libssl.lib'), lib.parent.join('libcrypto.lib') ]
                        /* Need to import the DLLs for OpenSSL >= 1.1.1 */
                        let isearch = [ lib.dirname.join('include') ]
                        inc = probe('openssl/ssl.h', {search: isearch})
                        includes = [ inc ]
                        path = lib.dirname.parent
                    } else {
                        libraries = [ 'libcrypto', '' ]
                        imports =   [ lib.parent.join('libcrypto.lib'), lib.parent.join('libssl.lib') ]
                        if (lib.dirname == 'out32dll') {
                            imports += [ lib.parent.join('libcrypto.dll'), lib.parent.join('libssl.dll') ]
                        }
                        path = lib.dirname.parent
                        includes = [ probe('openssl/ssl.h', {search: [path.join('include')]}) ]
                    }
                    libpaths =  [ lib.parent ]

                } else {
                    let libsearch =
                        search.map(function(p:Path) p.dirname.join('lib')) +
                        search.map(function(p:Path) p.join('lib')) +
                        search
                    let hsearch = 
                        search.map(function(p:Path) p.dirname.join('include')) +
                        search.map(function(p:Path) p.join('include')) +
                        search

                    let opt = {fullpath: true, search: libsearch, nopath: true}
                    let inc, lib
                    if ((lib = probe('libcrypto.' + me.ext.shobj, blend({nothrow: true}, opt))) != null) {
                        if (!me.platform.cross) {
                            hsearch.push('/usr/include')
                        }
                        inc = probe('openssl/ssl.h', {search: hsearch, nothrow: true})
                    }
                    if (!lib || !inc) {
                        lib = probe('libcrypto.' + me.ext.lib, opt)
                        if (!me.platform.cross) {
                            hsearch.push('/usr/include')
                        }
                        inc = probe('openssl/ssl.h', {search: hsearch})
                    }
                    includes = [ inc ]
                    libraries = [ 'ssl', 'crypto' ]
                    libpaths = [ lib.parent ]
                    path = lib.dirname
                }
                includes.push(me.dir.inc)
                return {
                    location:   path,
                    imports:    imports,
                    includes:   includes,
                    libpaths:   libpaths,
                    libraries,  libraries,
                }
            },
            ifdef:     [ 'ssl' ],
            conflicts: [ 'mbedtls' ],
        },
    }
})

