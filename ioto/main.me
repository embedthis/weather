/*
    main.me -- Main MakeMe file for distribution to generate makefiles
 */

Me.load({
    plugins: [ 'installs' ],

    blend: [ 
        'apps/**.me',
        'mbedtls.me', 
        'openssl.me', 
        'ssl.me',
        'installs/installs.me',
    ],

    configure: {
        discovers: ['ssl'],
        requires:  [ 'db', 'osdep', 'uctx', 'r', 'json', 'mqtt', 'ioto', 'websockets', 'web', 'url', 'openai' ],
    },
    
    settings: {
        app: 'demo',
        static: true,
        user: 'ioto',
        group: 'ioto',

        prefixes: 'install-prefixes',
        manifest: 'installs/manifest.me',

        platforms: [ 'local' ],
        tls: 'openssl',
        tune: 'size',
        prefixes: 'install-prefixes',
    },


    targets: {
        osdep:      { enable: true },
        r:          { enable: true },
        uctx:       { enable: true },
        mqtt:       { enable: true },
        url:        { enable: true },
        web:        { enable: true },
        websockets: { enable: true },
        openai:     { enable: true },

        config: {
            goals: ['all'],
            depends: [ 'appConfig', 'state/config/ioto.json5' ],
            path: 'src/ioto-config.h',
            shell: `
                if [ ! -f state/config/ioto.json5 ] ; then
                    cp apps/${settings.app}/config/ioto.json5 state/config/ioto.json5
                fi
                json --header services state/config/ioto.json5 >src/ioto-config.h
                rm -f ${OBJ}/*.o
            `,
            message: 'Update src/ioto-config.h',
        },

        appConfig: {
            goals: ['all'],
            shell: `
                APP=$(json app state/config/ioto.json5)
                PROFILE=$(json profile state/config/ioto.json5)
                VERSION=$(json version pak.json)
                echo "      [Info] Building Ioto ${VERSION} and the \\"${APP}\\" app for ${PROFILE}"
                [ -f apps/${APP}/Makefile ] && make --no-print-directory -C apps/${APP} config ; true
            `,
        },

        libioto: {
            type: 'lib',
            headers: [ 'include/*.h' ],
            sources: [ 'lib/*.c', 'lib/*.S' ],
            depends: [ 'ssl' ],
        },
        ioto: {
            type: 'exe',
            sources: [ 'cmds/main.c' ],
            depends: [ 'libioto', 'apps' ],
        },
        password: {
            type: 'exe',
            depends: [ 'libioto' ],
            sources: [ 'cmds/password.c' ],
        },
        db: {
            type: 'exe',
            depends: [ 'libioto' ],
            sources: [ 'cmds/db.c' ],
        },
        json: {
            type: 'exe',
            depends: [ 'libioto' ],
            sources: [ 'cmds/json.c' ],
        },
        webserver: {
            type: 'exe',
            depends: [ 'libioto' ],
            sources: [ 'cmds/web.c' ],
        },
        projects: {
            action: `
                genProjects('', ['default'], ['freebsd-arm', 'linux-x64', 'macosx-arm64', 'vxworks-arm', 'windows-x64'] )
                genProjects('--with mbedtls', ['default'], ['freertos-arm'])
                run('bash bin/fixProjects')
            `,
        },
    },
})
