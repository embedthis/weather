/*
    manifest.me - MakeMe Manifest for Embedthis
 */

Me.load({
    manifest: {
        home: me.dir.bin,
        root: true,
        log: true,
        packages:   {
            install: {
                inherit:      'package-manifest',
                prefixes:     [ 'root', 'app', 'vapp', 'bin', 'man', 'web', 'etc', 'vlib'],
                sets:         [ 'core', 'libs', 'headers' ],
                'sets-cross': [ 'core', 'libs', 'headers' ],
                platforms:    [ 'unix', 'windows' ]
            },
            _binary: {
                inherit:    'package-manifest',
                prefixes:   [ 'root', 'app', 'vapp', 'bin', 'man', 'web', 'etc', 'vlib'],
                formats:    [ 'native', 'tar' ],
                sets:       [ 'core', 'libs', 'headers', 'package' ],
                platforms:  [ 'freebsd', 'linux', 'macosx', 'windows' ]
            },
            source: {
                inherit:    'package-manifest',
                prefixes:   [ 'root', 'src' ],
                formats:    [ 'tar' ],
                sets:       [ 'source' ],
            },
            pak: {
                inherit:    'package-manifest',
                prefixes:   [ 'src'],
                formats:    [ 'tar' ],
                sets:       [ 'pak' ],
            },
        },
        sets: {
            dirs: [ {
                    mkdir:       [ '${base}' ],
                    user:        'root',
                    group:       'root',
                    permissions: 0755,
                }, {
                    mkdir:      [ '${app}' ],
                    user:       '${settings.user}',
                    group:      '${settings.group}',
                    permissions: 0700,
                }, {
                    mkdir:      [ '${etc}' ],
                    user:       '${settings.user}',
                    group:      '${settings.group}',
                    permissions: 0700,
                }
            ],
            core: [
                {
                    from:       '${BIN}/ioto${EXE}',
                    to:         '${abin}/',
                    symlink:    '${bin}/',
                    permissions: 0755,

                }, {
                    //  State directory
                    mkdir:       [ '/var/lib/ioto' ],
                    permissions: 0750,

                }, {
                    from:       '${TOP}/installs/uninstall.sh',
                    to:         '${abin}/uninstall',
                    permissions: 0755,
                    patch:      true,

                }, {
                    from: [
                        '${TOP}/certs/roots.crt',
                        '${TOP}/certs/test.crt',
                        '${TOP}/certs/test.key',
                        '${TOP}/certs/aws.crt',
                    ],
                    to: '${vlib}/certs/',

                }, {
                    from:       [ '${TOP}/scripts/update' ],
                    to:         '${abin}/scripts/update',
                    permissions: 0755,
                    patch:      true,

                }, {
                    literal:    'mkdir -p ${web} ; cp -r state/site/* ${web}',

                }, {
                    from:       [ '${TOP}/state/config/*.json5' ],
                    to:         '${etc}/',
                    exclude:    /ioto.json5|test|local.json5|provision.json5/,

                }, {
                    from: '${TOP}/state/config/ioto.json5',
                    to: '${etc}/ioto.json5',
                    perform: function(from, to, options) {
                        let data = from.readString()
                        data = data.replace(/profile: 'dev'/, "profile: 'prod'")
                        to.write(data)
                        return data
                    },

                }, {
                    literal:    'mkdir -p ${vlib}/db',
                }
            ],

            libs: [
                {
                    from:       'libioto${ARLIB}',
                    to:         '${abin}/',
                }
            ],

            headers: [
                {
                    from:   '${INC}/*.h',
                    to:     '${ainc}/',
                }
            ],

            full_source: [
                {
                    from:   '${TOP}/*.md',
                    to:     '${src}/',
                    fold:   true,
                    patch:  true,

                }, {
                    from: [
                        '${TOP}/bin/prep-build',
                    ],
                    to: '${src}/bin/',
                    permissions: 0755,

                }, {
                    from: [
                        '${TOP}/config/*.json5',
                    ],
                    to:         '${src}/config/',
                    exclude:    /db.json5|local.json5|provision.json5/,

                }, {
                    home: '${TOP}',
                    from: [
                        'Makefile',
                        'main.me',
                        'make.bat',
                        'pak.json',
                        'scripts',
                        'src',
                        'paks',
                        'certs',
                        'projects',
                        'installs'
                    ],
                    exclude:    /archive\/|\.old$|\.tmp$|xcuserdata|xcworkspace|project.guid|-mine|node_modules|Connect/,
                    to:         '${src}/',
                    flatten:    false,
                },
            ],
            source: [
                {
                    from: [ 
                        '${TOP}/EVAL.md',
                        '${TOP}/LICENSE.md',
                        '${TOP}/README*.md'
                    ],
                    to: '${src}/',
                    fold: true,
                    patch: true,
                }, {
                    from: [
                        '${TOP}/bin/prep-build',
                        '${TOP}/bin/ccp',
                        '${TOP}/bin/combine',
                        '${TOP}/bin/config-esp32',
                        '${TOP}/bin/export-app-config',
                        '${TOP}/bin/fixProjects',
                        '${TOP}/bin/make-certs',
                        '${TOP}/bin/make-sig',
                        '${TOP}/bin/setup-esp32',
                        '${TOP}/bin/json.*',
                    ],
                    to: '${src}/bin/',
                    permissions: 0755,

                }, {
                    from: [
                        '${TOP}/src/cmds/main.c',
                        '${TOP}/src/cmds/start.c',
                        '${TOP}/src/web/web.c',
                        '${TOP}/src/web/password.c',
                        '${TOP}/src/db/db.c',
                        '${TOP}/src/json/json.c',
                    ],
                    to: '${src}/cmds/',

                }, {
                    from: [
                        '${TOP}/src/crypt/cryptLib.c',
                        '${TOP}/src/db/dbLib.c',
                        '${TOP}/src/uctx/uctxLib.c',
                        '${TOP}/src/uctx/uctxAssembly.S',
                        '${TOP}/src/json/jsonLib.c',
                        '${TOP}/src/mqtt/mqttLib.c',
                        '${TOP}/src/r/rLib.c',
                        '${TOP}/src/url/urlLib.c',
                        '${TOP}/src/web/webLib.c',
                        '${TOP}/src/openai/openaiLib.c',
                        '${TOP}/src/websockets/websocketsLib.c',
                    ],
                    to:      '${src}/lib/',
                    exclude: /\.me|db.c|json.c|password.c|webserver.c|\/arch\//,

                }, {
                    from:       ['${TOP}/src/*.c', '${TOP}/src/cloud/*.c'],
                    exclude:    /\/ai\/|\/utils\/|start.c|stop.c|main.c|\/factory\//,
                    to:         '${src}/lib/iotoLib.c',
                    append:     true,
                    header:     '/*\n * ${settings.title} Library Source\n */\n\n#include \"ioto.h\"\n',
                    divider:    true,
                    filter:     /^#inc.*ioto.*$|^#inc.*customize.*$/mg,

                }, {
                    from: [
                        '${TOP}/src/crypt/*.h',
                        '${TOP}/src/db/*.h',
                        '${TOP}/src/uctx/*.h',
                        '${TOP}/src/json/*.h',
                        '${TOP}/src/mqtt/*.h',
                        '${TOP}/src/osdep/*.h',
                        '${TOP}/src/r/*.h',
                        '${TOP}/src/url/*.h',
                        '${TOP}/src/web/*.h',
                        '${TOP}/src/openai/*.h',
                        '${TOP}/src/websockets/*.h',
                    ],
                    to: '${src}/include/',
                    _exclude: /\/ai\//,
                    
                }, {
                    from: '${TOP}/projects/default-me.h',
                    to: '${src}/include/me.h',

                }, {
                    from: [
                        '${TOP}/src/ioto.h',
                        '${TOP}/src/ioto-config.h',
                    ],
                    to:     '${src}/include/',
                    filter: /^#inc.*customize.*$/mg,                        

                }, {
                    from: [
                        '${TOP}/certs/aws.crt',
                        '${TOP}/certs/roots.crt',
                        '${TOP}/certs/*.ans',
                        '${TOP}/certs/openssl.conf',
                    ],
                    to: '${src}/certs/',

                }, {
                    from:       '${TOP}/scripts/update',
                    to:         '${src}/scripts/update',
                    permissions: 0755,
                    patch:      true,
                    
                }, {
                    home:   '${TOP}',
                    from:   'apps/**',
                    to:     '${src}/',
                    exclude: /.local.mk|local.json5|unit\/$/,
                    flatten: false,

                }, {
                    home:   '${TOP}',
                    from:   'schemas/**',
                    to:     '${src}',
                    exclude: /.local.mk|local.json5|unit\/$/,
                    flatten: false,

                }, {
                    //  Needed to generate projects
                    from: '${TOP}/apps/demo/config/ioto.json5',
                    to: '${src}/state/config/ioto.json5',
                    perform: function(from, to, options) {
                        to.dirname.makeDir()
                        let data = from.readString()
                        data = data.replace(/profile: 'dev'/, "profile: 'prod'")
                        to.write(data)
                        return data
                    },

                }, {
                    from:       '${TOP}/apps/demo/config/schema.json5',
                    to:         '${src}/state/config/schema.json5',
                    
                }, {
                    from:       '${TOP}/apps/demo/config/device.json5',
                    to:         '${src}/state/config/device.json5',
                    
                }, {
                    from:       '${TOP}/installs/',
                    to:         '${src}/installs',
                    exclude:    /dist.me|main.me|CLAUDE/,

                }, {
                    from:       '${TOP}/projects/esp32',
                    to:         '${src}/projects/esp32/',

                }, {
                    //  These are required to generate makefiles during packaging and are removed later
                    from: [
                        '${TOP}/installs/Makefile',
                        '${TOP}/installs/main.me',
                        '${TOP}/installs/dist.me',
                        '${TOP}/pak.json',
                        '${TOP}/src/ssl/openssl.me',
                        '${TOP}/src/ssl/mbedtls.me',
                        '${TOP}/src/ssl/ssl.me',
                    ],
                    to: '${src}',
                }, {
                    from: [
                        '${TOP}/installs/CLAUDE.md',
                        '${TOP}/../installs/CLAUDE.md',
                    ],
                    to: '${src}/CLAUDE.md',
                    append: true,
                    
                }, {
                    //  Generate projects
                    home: '${TOP}',
                    to: '${src}',
                    postPerform: function(from, to) {
                        run('me -q configure', {dir: to})
                        run('me -q projects', {dir: to})
                        run('rm -fr ./state', {dir: to})
                    }
                }
            ],
            pak: [
                {
                    from:       '${TOP}/installs/dist.me',
                    to:         '${src}/dist/ioto.me',

                }, {
                    from:       '${TOP}/src/ioto.h',
                    to:         '${src}/dist/ioto.h',
                    append:     true,
                    filter:     /^#inc.*customize.*$/mg,

                }, {
                    from:       '${TOP}/src/cmds/main.c',
                    to:         '${src}/dist/main.c',

                }, {
                    from:       ['${TOP}/src/*.c', '${TOP}/src/cloud/*.c'],
                    exclude:    /\/utils\/|start.c|stop.c|main.c|\/factory\//,
                    to:         '${src}/dist/ioto.c',
                    append:     true,
                    header:     '/*\n * ${settings.title} Library Source\n */\n\n#include \"ioto.h\"\n\n',
                    divider:    true,
                    filter:     /^#inc.*ioto.*$|^#inc.*customize.*$/mg,

                },{
                    home:       '${TOP}',
                    from:       ['${TOP}/doc/api/ioto.html', '${TOP}/doc/api/ioto.tags', '${TOP}/doc/api/ioto.dtags'],
                    to:         '${src}/doc/api/',
                    relative:   'doc/api',
                },
            ]
        }
    }
})
